# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TsJitwjSInaqF_0gTJLCChwo1D5xVFJa

### IMPORT LIBRARY
Pada bagian ini, kita mengimpor berbagai library yang diperlukan untuk proses analisis data dan pembangunan model machine learning.
- pandas dan numpy digunakan untuk manipulasi data.
- sklearn digunakan untuk pembagian data, pemodelan, dan evaluasi.
- matplotlib.pyplot dan seaborn digunakan untuk visualisasi data.
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

"""### Loading Data
Dataset diabetes.csv dimuat ke dalam variabel df menggunakan fungsi pd.read_csv(). Dataset ini berisi informasi medis pasien seperti kadar glukosa, tekanan darah, BMI, dan variabel lainnya yang digunakan untuk memprediksi kemungkinan seseorang menderita diabetes (Outcome).
"""

df = pd.read_csv("diabetes.csv")

"""### EDA
Pada tahap ini, dilakukan peninjauan awal terhadap data seperti melihat beberapa baris teratas, memeriksa tipe data dan jumlah nilai non-null, serta melihat statistik deskriptif untuk memahami distribusi dan karakteristik setiap fitur.
"""

df.head()

df.info()

df.describe(include = "all")

print("\nJumlah data duplikat:", df.duplicated().sum())

plt.figure(figsize=(10,8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Heatmap Korelasi Fitur')
plt.show()

"""## Korelasi Fitur
Visualisasi heatmap korelasi digunakan untuk memahami hubungan antar fitur dalam dataset. Beberapa insight yang diperoleh dari heatmap:

Glucose menunjukkan korelasi paling kuat terhadap Outcome (0.47), menandakan bahwa kadar glukosa darah sangat berpengaruh terhadap kemungkinan diabetes.

Fitur BMI (Body Mass Index) dan Age juga memiliki korelasi moderat terhadap Outcome (masing-masing 0.29 dan 0.24).

Beberapa fitur seperti SkinThickness, BloodPressure, dan Insulin memiliki korelasi yang relatif rendah terhadap Outcome.

Informasi ini dapat digunakan sebagai dasar untuk melakukan seleksi fitur (feature selection), terutama jika ingin menyederhanakan model.

### Data Preparation
Pada tahap ini, dilakukan pembersihan data untuk mengatasi nilai 0 pada fitur medis, Nilai tersebut diganti dengan NaN dan kemudian diimputasi menggunakan nilai median agar data tetap representatif dan tidak terdistorsi oleh outlier
"""

cols_with_zero = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
for col in cols_with_zero:
    df[col].replace(0, np.nan, inplace=True)

df.fillna(df.median(), inplace=True)

"""### Split Dataset"""

X = df.drop('Outcome', axis=1)
y = df['Outcome']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""### Model Training"""

model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

"""### Prediction and Evaluation
Evaluasi ini memberikan gambaran seberapa baik model memprediksi kemungkinan diabetes berdasarkan fitur medis yang tersedia.
"""

y_pred = model.predict(X_test)

print("\nAkurasi:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:")
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

"""## Confusion Matrix
Evaluasi model dilakukan untuk mengetahui seberapa baik performa model klasifikasi yang dibangun. Berdasarkan Confusion Matrix dan Classification Report:

Akurasi model adalah 74.68%

Model berhasil mengenali:

78 pasien yang benar-benar tidak diabetes (True Negative)

37 pasien yang benar-benar diabetes (True Positive)

Model keliru memprediksi:

21 pasien sebagai tidak diabetes padahal sebenarnya diabetes (False Negative)

18 pasien sebagai diabetes padahal sebenarnya tidak diabetes (False Positive)

Insight penting: Model ini lebih baik dalam mengenali pasien non-diabetes daripada pasien yang positif diabetes, ditunjukkan oleh nilai recall yang lebih tinggi pada kelas 0. Namun, tingkat False Negative masih cukup tinggi (21 kasus), yang bisa berisiko dalam konteks medis karena pasien sebenarnya positif tapi tidak terdeteksi.
"""

importances = model.feature_importances_
features = X.columns
feat_imp = pd.Series(importances, index=features).sort_values(ascending=False)

plt.figure(figsize=(10,6))
feat_imp.plot(kind='bar')
plt.title('Feature Importance')
plt.ylabel('Importance')
plt.tight_layout()
plt.show()

"""## Feature Importance
Visualisasi feature importance memberikan gambaran tentang fitur mana yang paling berpengaruh dalam membuat prediksi:

Glucose menjadi fitur paling penting dalam model, diikuti oleh BMI dan Age.

Fitur-fitur seperti Pregnancies, SkinThickness, dan BloodPressure memiliki kontribusi lebih kecil.

Kesimpulan: Fitur Glucose menjadi penentu utama dalam memprediksi diabetes dalam model ini, selaras dengan hasil korelasi sebelumnya. Fitur-fitur dengan importance rendah dapat menjadi pertimbangan untuk dieksplorasi lebih lanjut atau bahkan dieliminasi untuk efisiensi.
"""

